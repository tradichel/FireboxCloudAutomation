AWSTemplateFormatVersion: "2010-09-09"
Description: "Firebox Public Subnet for Public ENI"
Parameters: 

  ParamStackName: 
    Type: String
    Description: "Name used in resource tags and names"
  ParamPublicSubnetCidr: 
    Type: String
    Description: "CIDR block for public subnet"
  ParamAdminCidr: 
    Type: String
    Description: "Admin IP Address to allow inbound CLI connections"
  ParamWebUIPort: 
    Type: String
    Default: "8080"
    Description: "Open port for CLI access to Firebox on port 8080"
  #s3 cidrs open for yum updates
  params3cidr0:
    Type: String
  params3cidr1:
    Type: String
    Default: ""
  params3cidr2:
    Type: String
    Default: ""
  params3cidr3:
    Type: String
    Default: ""
  params3cidr4:
    Type: String
    Default: ""
  params3cidr5:
    Type: String
    Default: ""
  params3eastcidr0:
    Type: String
    Default: ""
  params3eastcidr1:
    Type: String
    Default: ""
  params3eastcidr2:
    Type: String
    Default: ""
  params3eastcidr3:
    Type: String
    Default: ""
  paramsAWSGlobalDNS:
    Type: String
    Default: "205.251.192.0/19"

Conditions:
  #make sure all the IPs exist before we attempt to create
  #rules for them. This handles some, but not all, DNS changes\
  conds3cidr0: !Not [ !Equals [ !Ref params3cidr0, ""  ] ]
  conds3cidr1: !Not [ !Equals [ !Ref params3cidr1, "" ] ]
  conds3cidr2: !Not [ !Equals [ !Ref params3cidr2, "" ] ]
  conds3cidr3: !Not [ !Equals [ !Ref params3cidr3, "" ] ]
  conds3cidr4: !Not [ !Equals [ !Ref params3cidr4, "" ] ]
  conds3cidr5: !Not [ !Equals [ !Ref params3cidr5, "" ] ]

  conds3eastcidr0: !Not [ !Equals [ !Ref params3eastcidr0, ""  ] ]
  conds3eastcidr1: !Not [ !Equals [ !Ref params3eastcidr1, "" ] ]
  conds3eastcidr2: !Not [ !Equals [ !Ref params3eastcidr2, "" ] ]
  conds3eastcidr3: !Not [ !Equals [ !Ref params3eastcidr3, "" ] ]

Resources:

  FireboxPublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !ImportValue FireboxVPC
      CidrBlock: 
        !Ref ParamPublicSubnetCidr
      AvailabilityZone: 
        !Select 
          - 1
          - !GetAZs ""
      Tags:
      - Key: Name
        Value: FireboxPublicSubnet
      - Key: Stack
        Value: !Ref ParamStackName

  FireboxPublicRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties: 
      RouteTableId: !ImportValue FireboxPublicRouteTable
      SubnetId: !Ref FireboxPublicSubnet  
  
  ###
  # Allow traffic for network admin to Firebox Web UI
  ###
  FireboxPublicSubnetNacl:
    Type: "AWS::EC2::NetworkAcl"
    Properties:
      Tags:
        - Key: Name
          Value: FireboxManagementSubnetNacl
        - Key: Stack
          Value: !Ref ParamStackName
      VpcId: !ImportValue FireboxVPC
      Tags:
        - Key: Name
          Value: "Firebox Public Subnet Nacl"
        - Key: Stack
          Value: !Ref ParamStackName

  FireboxPublicSubnetNaclAssociation:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      SubnetId: !Ref FireboxPublicSubnet
      NetworkAclId: !Ref FireboxPublicSubnetNacl 

  #Allow Admin CIDR to access Web UI 
  #http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-network-acl-entry.html#cfn-ec2-networkaclentry-protocol
  #If you must - you could leave this rule out and only add it if required.
  NaclFireboxWebUIIngress:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties: 
      CidrBlock: !Ref ParamAdminCidr
      Egress: false 
      NetworkAclId: !Ref FireboxPublicSubnetNacl
      Protocol: 6
      PortRange: #required if protocol is not -1
         From: !Ref ParamWebUIPort
         To: !Ref ParamWebUIPort
      RuleAction : "Allow" 
      RuleNumber : "1001" #using 1000 range for ingress rules

  NaclS3Ingress0:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties: 
      CidrBlock: !Ref params3cidr0
      Egress: false 
      NetworkAclId: !Ref FireboxPublicSubnetNacl
      Protocol: 6
      PortRange: 
         From: 32768
         To: 65535
      RuleAction : "Allow" 
      RuleNumber : "1002" 

  NaclS3Ingress1:
    Type: "AWS::EC2::NetworkAclEntry"
    Condition: conds3cidr1
    Properties: 
      CidrBlock: !Ref params3cidr1
      Egress: false 
      NetworkAclId: !Ref FireboxPublicSubnetNacl
      Protocol: 6
      PortRange: 
         From: 32768
         To: 65535
      RuleAction : "Allow" 
      RuleNumber : "1003" 

  NaclS3Ingress2:
    Type: "AWS::EC2::NetworkAclEntry"
    Condition: conds3cidr2
    Properties: 
      CidrBlock: !Ref params3cidr2
      Egress: false 
      NetworkAclId: !Ref FireboxPublicSubnetNacl
      Protocol: 6
      PortRange: 
         From: 32768
         To: 65535
      RuleAction : "Allow" 
      RuleNumber : "1004" 

  NaclS3Ingress3:
    Type: "AWS::EC2::NetworkAclEntry"
    Condition: conds3cidr3
    Properties: 
      CidrBlock: !Ref params3cidr3
      Egress: false 
      NetworkAclId: !Ref FireboxPublicSubnetNacl
      Protocol: 6
      PortRange: 
         From: 32768
         To: 65535
      RuleAction : "Allow" 
      RuleNumber : "1005" 

  NaclS3Ingress4:
    Type: "AWS::EC2::NetworkAclEntry"
    Condition: conds3cidr4
    Properties: 
      CidrBlock: !Ref params3cidr4
      Egress: false 
      NetworkAclId: !Ref FireboxPublicSubnetNacl
      Protocol: 6
      PortRange: 
         From: 32768
         To: 65535
      RuleAction : "Allow" 
      RuleNumber : "1006" 

  NaclS3Ingress5:
    Type: "AWS::EC2::NetworkAclEntry"
    Condition: conds3cidr5
    Properties: 
      CidrBlock: !Ref params3cidr5
      Egress: false 
      NetworkAclId: !Ref FireboxPublicSubnetNacl
      Protocol: 6
      PortRange: 
         From: 32768
         To: 65535
      RuleAction : "Allow" 
      RuleNumber : "1007" 
  
  #all traffic to web server
  NaclWebIngress:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties: 
      CidrBlock: "0.0.0.0/0"
      Egress: false 
      NetworkAclId: !Ref FireboxPublicSubnetNacl
      Protocol: 6
      PortRange: 
         From: 80
         To: 80
      RuleAction : "Allow" 
      RuleNumber : "1008" 

  #SSH for admin
  NaclSSHIngress:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties: 
      CidrBlock: !Ref ParamAdminCidr
      Egress: false 
      NetworkAclId: !Ref FireboxPublicSubnetNacl
      Protocol: 6
      PortRange: 
         From: 22
         To: 22
      RuleAction : "Allow" 
      RuleNumber : "1009" 
  
  #could lock down to specific ntp servers..
  NaclNTPEgress:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties: 
      CidrBlock: 0.0.0.0/0 
      Egress: true #egress
      NetworkAclId: !Ref FireboxPublicSubnetNacl
      Protocol: 17 #udp
      PortRange: 
         From: 123
         To: 123
      RuleAction : "Allow" 
      RuleNumber : "1110" 

  NaclNTPEgress:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties: 
      CidrBlock: 0.0.0.0/0
      Egress: true #egress
      NetworkAclId: !Ref FireboxPublicSubnetNacl
      Protocol: 17 #udp
      PortRange: 
         From: 123
         To: 123
      RuleAction : "Allow" 
      RuleNumber : "1111" 

  NaclResponseEgress:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties: 
      CidrBlock: "0.0.0.0/0"
      Egress: true #egress
      NetworkAclId: !Ref FireboxPublicSubnetNacl
      Protocol: 6
      PortRange: 
         From: 1024
         To: 65535
      RuleAction : "Allow" 
      RuleNumber : "2000" 
  
  NaclS3Egress0:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties: 
      CidrBlock: !Ref params3cidr0
      Egress: true 
      NetworkAclId: !Ref FireboxPublicSubnetNacl
      Protocol: 6
      PortRange: 
         From: 80
         To: 443
      RuleAction : "Allow" 
      RuleNumber : "2002" 

  NaclS3Egress1:
    Type: "AWS::EC2::NetworkAclEntry"
    Condition: conds3cidr1
    Properties: 
      CidrBlock: !Ref params3cidr1
      Egress: true 
      NetworkAclId: !Ref FireboxPublicSubnetNacl
      Protocol: 6
      PortRange: 
         From: 80
         To: 443
      RuleAction : "Allow" 
      RuleNumber : "2003" 

  NaclS3Egress2:
    Type: "AWS::EC2::NetworkAclEntry"
    Condition: conds3cidr2
    Properties: 
      CidrBlock: !Ref params3cidr2
      Egress: true 
      NetworkAclId: !Ref FireboxPublicSubnetNacl
      Protocol: 6
      PortRange: 
         From: 80
         To: 443
      RuleAction : "Allow" 
      RuleNumber : "2004" 

  NaclS3Egress3:
    Type: "AWS::EC2::NetworkAclEntry"
    Condition: conds3cidr3
    Properties: 
      CidrBlock: !Ref params3cidr3
      Egress: true 
      NetworkAclId: !Ref FireboxPublicSubnetNacl
      Protocol: 6
      PortRange: 
         From: 80
         To: 443
      RuleAction : "Allow" 
      RuleNumber : "2005" 

  NaclS3Egress4:
    Type: "AWS::EC2::NetworkAclEntry"
    Condition: conds3cidr4
    Properties: 
      CidrBlock: !Ref params3cidr4
      Egress: true 
      NetworkAclId: !Ref FireboxPublicSubnetNacl
      Protocol: 6
      PortRange: 
         From: 80
         To: 443
      RuleAction : "Allow" 
      RuleNumber : "2006" 

  NaclS3Egress5:
    Type: "AWS::EC2::NetworkAclEntry"
    Condition: conds3cidr5
    Properties: 
      CidrBlock: !Ref params3cidr5
      Egress: true 
      NetworkAclId: !Ref FireboxPublicSubnetNacl
      Protocol: 6
      PortRange: 
         From: 80
         To: 443
      RuleAction : "Allow" 
      RuleNumber : "2007" 

  NaclS3EastEgress0:
    Type: "AWS::EC2::NetworkAclEntry"
    Condition: conds3eastcidr0
    Properties: 
      CidrBlock: !Ref params3eastcidr0
      Egress: true 
      NetworkAclId: !Ref FireboxPublicSubnetNacl
      Protocol: 6
      PortRange: 
         From: 80
         To: 443
      RuleAction : "Allow" 
      RuleNumber : "2008" 

  NaclS3EgressEast1:
    Type: "AWS::EC2::NetworkAclEntry"
    Condition: conds3eastcidr1
    Properties: 
      CidrBlock: !Ref params3eastcidr1
      Egress: true 
      NetworkAclId: !Ref FireboxPublicSubnetNacl
      Protocol: 6
      PortRange: 
         From: 80
         To: 449
      RuleAction : "Allow" 
      RuleNumber : "2009" 

  NaclS3EgressEast2:
    Type: "AWS::EC2::NetworkAclEntry"
    Condition: conds3eastcidr2
    Properties: 
      CidrBlock: !Ref params3eastcidr2
      Egress: true 
      NetworkAclId: !Ref FireboxPublicSubnetNacl
      Protocol: 6
      PortRange: 
         From: 80
         To: 443
      RuleAction : "Allow" 
      RuleNumber : "2010" 

  NaclS3EgressEast3:
    Type: "AWS::EC2::NetworkAclEntry"
    Condition: conds3eastcidr3
    Properties: 
      CidrBlock: !Ref params3eastcidr3
      Egress: true 
      NetworkAclId: !Ref FireboxPublicSubnetNacl
      Protocol: 6
      PortRange: 
         From: 80
         To: 443
      RuleAction : "Allow" 
      RuleNumber : "2011" 

  NaclAWSDNS:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties: 
      CidrBlock: !Ref paramsAWSGlobalDNS
      Egress: true 
      NetworkAclId: !Ref FireboxPublicSubnetNacl
      Protocol: 17
      PortRange: 
         From: 53
         To: 53
      RuleAction : "Allow" 
      RuleNumber : "2013" 

Outputs:
  FireboxPublicSubnet:
    Value: !Ref FireboxPublicSubnet
    Export:
      Name: "FireboxPublicSubnet"
