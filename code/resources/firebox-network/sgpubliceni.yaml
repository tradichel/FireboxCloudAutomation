AWSTemplateFormatVersion: 2010-09-09
Description: Firebox Cloud Security Groups

Parameters: 
  ParamStackName: 
    Type: String
    Default: firebox-trial
    Description: Name used in resource tags and names
  ParamCLIPort: 
    Type: String
    Default: 4118
    Description: Open port for CLI access to Firebox on port 4118
  #watchguardips-out for security services
  paramservices1:
    Type: String
  paramfeedback1:
    Type: String
  paramask1:
    Type: String
  paramtdrfblana1:
    Type: String
    Default: ""
  paramtdrfblana2:
    Type: String
    Default: ""
  paramtdrfblaeu1:
    Type: String
    Default: ""
  paramtdrfblaeu2:
    Type: String
    Default: ""
  paramwebrepauth1:
    Type: String
    Default: ""
  paramwebrepauth2:
    Type: String
    Default: ""
  paramwebrepauth3:
    Type: String
    Default: ""
  paramwebrepauth4:
    Type: String
    Default: ""
  paramwebrepauth5:
    Type: String
    Default: ""
  ParamAdminCidr: 
    Type: String
    Description: "Admin IP Address to allow inbound CLI connections"
  ParamWebUIPort: 
    Type: String
    Default: "8080"
    Description: "Open port for CLI access to Firebox on port 8080"
  paramsAWSGlobalDNS:
    Type: String
    Default: "205.251.192.0/19"

Conditions:
  #make sure all the IPs exist before we attempt to create
  #rules for them. This handles some, but not all, DNS changes
  condtdrfblana1: !Not [ !Equals [ !Ref paramtdrfblana1, "" ] ]
  condtdrfblana2: !Not [ !Equals [ !Ref paramtdrfblana2, "" ] ]
  condtdrfblaeu1: !Not [ !Equals [ !Ref paramtdrfblaeu1, "" ] ]
  condtdrfblaeu2: !Not [ !Equals [ !Ref paramtdrfblaeu2, "" ] ]
  condwebrepauth1: !Not [ !Equals [ !Ref paramwebrepauth1, ""  ] ]
  condwebrepauth2: !Not [ !Equals [ !Ref paramwebrepauth2, ""  ] ]
  condwebrepauth3: !Not [ !Equals [ !Ref paramwebrepauth3, ""  ] ]
  condwebrepauth4: !Not [ !Equals [ !Ref paramwebrepauth4, ""  ] ]
  condwebrepauth5: !Not [ !Equals [ !Ref paramwebrepauth5, ""  ] ]
  
Resources:

  #http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-security-group-rule.html
  FireboxPublicSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Public Firebox Security Group 
      #TODO: verify no ingress created
      SecurityGroupEgress: 
      - CidrIp: !Ref paramservices1
        IpProtocol: tcp
        FromPort: 443
        ToPort: 443
      - CidrIp: !Ref paramfeedback1
        IpProtocol: tcp
        FromPort: 443
        ToPort: 443
      - CidrIp: !Ref paramask1
        IpProtocol: tcp
        FromPort: 443
        ToPort: 443
      - CidrIp: "0.0.0.0/0"
        IpProtocol: tcp
        FromPort: 123
        ToPort: 123
      SecurityGroupIngress: 
      - CidrIp: !Ref ParamAdminCidr
        IpProtocol: tcp
        FromPort: !Ref ParamWebUIPort
        ToPort: !Ref ParamWebUIPort
      #anyone to our web server on port 80
      - CidrIp: "0.0.0.0/0"
        IpProtocol: tcp
        FromPort: 80
        ToPort: 80
      VpcId: !ImportValue FireboxVPC
      Tags:
      - Key: Name
        Value: FireboxPublicSecurityGroup
      - Key: Stack
        Value: 
          Ref: ParamStackName


  #Create conditional egress rules
  #http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-security-group-egress.html
  #Note: TDR not available on pay-as-you-go version of Firebox Cloud
  FireboxPublicEgressWG1:
    Type: AWS::EC2::SecurityGroupEgress
    Condition: condtdrfblana1
    Properties:
      GroupId: !Ref FireboxPublicSecurityGroup
      CidrIp: !Ref paramtdrfblana1
      FromPort: 4115
      ToPort: 4115
      IpProtocol: tcp

  FireboxPublicEgressWG2:
    Type: AWS::EC2::SecurityGroupEgress
    Condition: condtdrfblana2
    Properties:
      GroupId: !Ref FireboxPublicSecurityGroup
      CidrIp: !Ref paramtdrfblana2
      FromPort: 4115
      ToPort: 4115
      IpProtocol: tcp

  FireboxPublicEgressWG3:
    Type: AWS::EC2::SecurityGroupEgress
    Condition: condtdrfblaeu1
    Properties:
      GroupId: !Ref FireboxPublicSecurityGroup
      CidrIp: !Ref paramtdrfblaeu1
      FromPort: 4115
      ToPort: 4115
      IpProtocol: tcp

  FireboxPublicEgressWG4:
    Type: AWS::EC2::SecurityGroupEgress
    Condition: condtdrfblaeu2
    Properties:
      GroupId: !Ref FireboxPublicSecurityGroup
      CidrIp: !Ref paramtdrfblaeu2
      FromPort: 4115
      ToPort: 4115
      IpProtocol: tcp

  FireboxPublicEgressWG5:
    Type: AWS::EC2::SecurityGroupEgress
    Condition: condwebrepauth1
    Properties:
      GroupId: !Ref FireboxPublicSecurityGroup
      CidrIp: !Ref paramwebrepauth1
      FromPort: 53
      ToPort: 53
      IpProtocol: udp

  FireboxPublicEgressWG6:
    Type: AWS::EC2::SecurityGroupEgress
    Condition: condwebrepauth2
    Properties:
      GroupId: !Ref FireboxPublicSecurityGroup
      CidrIp: !Ref paramwebrepauth2
      FromPort: 53
      ToPort: 53
      IpProtocol: udp

  FireboxPublicEgressWG7:
    Type: AWS::EC2::SecurityGroupEgress
    Condition: condwebrepauth2
    Properties:
      GroupId: !Ref FireboxPublicSecurityGroup
      CidrIp: !Ref paramwebrepauth2
      FromPort: 53
      ToPort: 53
      IpProtocol: udp

  FireboxPublicEgressWG8:
    Type: AWS::EC2::SecurityGroupEgress
    Condition: condwebrepauth4
    Properties:
      GroupId: !Ref FireboxPublicSecurityGroup
      CidrIp: !Ref paramwebrepauth4
      FromPort: 53
      ToPort: 53
      IpProtocol: udp

  FireboxPublicEgressWG9:
    Type: AWS::EC2::SecurityGroupEgress
    Condition: condwebrepauth5
    Properties:
      GroupId: !Ref FireboxPublicSecurityGroup
      CidrIp: !Ref paramwebrepauth5
      FromPort: 53
      ToPort: 53
      IpProtocol: udp

  FireboxAwsDns:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref FireboxPublicSecurityGroup
      CidrIp: !Ref paramsAWSGlobalDNS
      FromPort: 53
      ToPort: 53
      IpProtocol: udp

Outputs:
  FireboxPublicSecurityGroup:
    Value: !Ref FireboxPublicSecurityGroup
    Export:
      Name: FireboxPublicSecurityGroup
 