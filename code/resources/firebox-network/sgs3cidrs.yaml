AWSTemplateFormatVersion: 2010-09-09
Description: S3 Cidr Security Group

Parameters: 
  ParamStackName: 
    Type: String
    Default: firebox-trial
    Description: Name used in resource tags and names
   #s3 cidrs open for yum updates
  params3cidr0:
    Type: String
  params3cidr1:
    Type: String
    Default: ""
  params3cidr2:
    Type: String
    Default: ""
  params3cidr3:
    Type: String
    Default: ""
  params3cidr4:
    Type: String
    Default: ""
  params3cidr5:
    Type: String
    Default: ""
  params3eastcidr0:
    Type: String
    Default: ""
  params3eastcidr1:
    Type: String
    Default: ""
  params3eastcidr2:
    Type: String
    Default: ""
  params3eastcidr3:
    Type: String
    Default: ""

Conditions:
  #make sure all the IPs exist before we attempt to create
  #rules for them. This handles some, but not all, DNS changes\
  conds3cidr0: !Not [ !Equals [ !Ref params3cidr0, ""  ] ]
  conds3cidr1: !Not [ !Equals [ !Ref params3cidr1, "" ] ]
  conds3cidr2: !Not [ !Equals [ !Ref params3cidr2, "" ] ]
  conds3cidr3: !Not [ !Equals [ !Ref params3cidr3, "" ] ]
  conds3cidr4: !Not [ !Equals [ !Ref params3cidr4, "" ] ]
  conds3cidr5: !Not [ !Equals [ !Ref params3cidr5, "" ] ]

  conds3eastcidr0: !Not [ !Equals [ !Ref params3eastcidr0, ""  ] ]
  conds3eastcidr1: !Not [ !Equals [ !Ref params3eastcidr1, "" ] ]
  conds3eastcidr2: !Not [ !Equals [ !Ref params3eastcidr2, "" ] ]
  conds3eastcidr3: !Not [ !Equals [ !Ref params3eastcidr3, "" ] ]

Resources:

  #http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-security-group-rule.html
  S3CidrSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: S3 Cidr Security Group
      #No ingress should be created by default
      SecurityGroupEgress: 
      - CidrIp: !Ref params3cidr0
        IpProtocol: tcp
        FromPort: 80
        ToPort: 80
      VpcId: !ImportValue FireboxVPC
      Tags:
      - Key: Name
        Value: S3CidrSecurityGroup
      - Key: Stack
        Value: 
          Ref: ParamStackName

  #Create conditional egress rules
  #http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-security-group-egress.html
  #Note: TDR not available on pay-as-you-go version of Firebox Cloud
  S3Cidr0:
    Type: AWS::EC2::SecurityGroupEgress
    Condition: conds3cidr1
    Properties:
      GroupId: !Ref S3CidrSecurityGroup
      CidrIp: !Ref params3cidr1
      FromPort: 80
      ToPort: 80
      IpProtocol: tcp

  S3Cidr1:
    Type: AWS::EC2::SecurityGroupEgress
    Condition: conds3cidr1
    Properties:
      GroupId: !Ref S3CidrSecurityGroup
      CidrIp: !Ref params3cidr1
      FromPort: 80
      ToPort: 80
      IpProtocol: tcp

  S3Cidr2:
    Type: AWS::EC2::SecurityGroupEgress
    Condition: conds3cidr2
    Properties:
      GroupId: !Ref S3CidrSecurityGroup
      CidrIp: !Ref params3cidr2
      FromPort: 80
      ToPort: 80
      IpProtocol: tcp

  S3Cidr3:
    Type: AWS::EC2::SecurityGroupEgress
    Condition: conds3cidr3
    Properties:
      GroupId: !Ref S3CidrSecurityGroup
      CidrIp: !Ref params3cidr3
      FromPort: 80
      ToPort: 80
      IpProtocol: tcp

  S3Cidr4:
    Type: AWS::EC2::SecurityGroupEgress
    Condition: conds3cidr4
    Properties:
      GroupId: !Ref S3CidrSecurityGroup
      CidrIp: !Ref params3cidr4
      FromPort: 80
      ToPort: 80
      IpProtocol: tcp

  S3Cidr5:
    Type: AWS::EC2::SecurityGroupEgress
    Condition: conds3cidr5
    Properties:
      GroupId: !Ref S3CidrSecurityGroup
      CidrIp: !Ref params3cidr5
      FromPort: 80
      ToPort: 84
      IpProtocol: tcp

  S3Cidr0443:
    Type: AWS::EC2::SecurityGroupEgress
    Condition: conds3cidr1
    Properties:
      GroupId: !Ref S3CidrSecurityGroup
      CidrIp: !Ref params3cidr1
      FromPort: 443
      ToPort: 443
      IpProtocol: tcp

  S3Cidr1443:
    Type: AWS::EC2::SecurityGroupEgress
    Condition: conds3cidr1
    Properties:
      GroupId: !Ref S3CidrSecurityGroup
      CidrIp: !Ref params3cidr1
      FromPort: 443
      ToPort: 443
      IpProtocol: tcp

  S3Cidr2443:
    Type: AWS::EC2::SecurityGroupEgress
    Condition: conds3cidr2
    Properties:
      GroupId: !Ref S3CidrSecurityGroup
      CidrIp: !Ref params3cidr2
      FromPort: 443
      ToPort: 443
      IpProtocol: tcp

  S3Cidr3443:
    Type: AWS::EC2::SecurityGroupEgress
    Condition: conds3cidr3
    Properties:
      GroupId: !Ref S3CidrSecurityGroup
      CidrIp: !Ref params3cidr3
      FromPort: 443
      ToPort: 443
      IpProtocol: tcp

  S3Cidr4443:
    Type: AWS::EC2::SecurityGroupEgress
    Condition: conds3cidr4
    Properties:
      GroupId: !Ref S3CidrSecurityGroup
      CidrIp: !Ref params3cidr4
      FromPort: 443
      ToPort: 443
      IpProtocol: tcp

  S3Cidr5443:
    Type: AWS::EC2::SecurityGroupEgress
    Condition: conds3cidr5
    Properties:
      GroupId: !Ref S3CidrSecurityGroup
      CidrIp: !Ref params3cidr5
      FromPort: 443
      ToPort: 443
      IpProtocol: tcp

  #east
  S3Cidreast0:
    Type: AWS::EC2::SecurityGroupEgress
    Condition: conds3eastcidr0
    Properties:
      GroupId: !Ref S3CidrSecurityGroup
      CidrIp: !Ref params3eastcidr0
      FromPort: 443
      ToPort: 443
      IpProtocol: tcp

  S3Cidreast1:
    Type: AWS::EC2::SecurityGroupEgress
    Condition: conds3eastcidr1
    Properties:
      GroupId: !Ref S3CidrSecurityGroup
      CidrIp: !Ref params3eastcidr1
      FromPort: 443
      ToPort: 443
      IpProtocol: tcp

  S3Cidreast2:
    Type: AWS::EC2::SecurityGroupEgress
    Condition: conds3eastcidr2
    Properties:
      GroupId: !Ref S3CidrSecurityGroup
      CidrIp: !Ref params3eastcidr2
      FromPort: 443
      ToPort: 443
      IpProtocol: tcp

  S3Cidreast3:
    Type: AWS::EC2::SecurityGroupEgress
    Condition: conds3eastcidr3
    Properties:
      GroupId: !Ref S3CidrSecurityGroup
      CidrIp: !Ref params3eastcidr3
      FromPort: 443
      ToPort: 443
      IpProtocol: tcp


Outputs:
  S3CidrSecurityGroup:
    Value: !Ref S3CidrSecurityGroup
    Export:
      Name: S3CidrSecurityGroup
